# -*- coding: utf-8 -*-
"""Update_BasicAgent.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XJ2xxhCih3BYZ100MyqPWO3AT3JAYA3a

# A simple agent model
"""

#TC2008B
# Equipo 2:


import numpy as np, time
from IPython.display import clear_output
import json

'''
A simple class for a room environment. If nostate is given
a random square environment is initialized with the given list o prizes
'''
class Room:
  # Generate a NXN board with an object in a random position
  def __init__(self, state=None, shape=None, prizes=[]):
    # If the environment is given
    if state is not None:
        self.state = np.array(state)
        self.shape = self.state.shape
    # If not generate randomly
    else:
        self.shape = shape
        self.state = np.zeros(shape)
        for p in prizes:
            h, w = np.random.randint(shape[0]), np.random.randint(shape[1])
            while self.state[h, w] != 0:
                h, w = np.random.randint(shape[0]), np.random.randint(shape[1])
            self.state[h, w] = p

    # A function to transform the state
    def setValue(self, pos, value):
        self.state[pos[0], pos[1]] = value


'''
A simple implementation of an agent with 4 basic actions (movements).
It keeps as internal states: position and money left.
'''
class Agent:

    def __init__(self, env, money, step_cost, pos = [0,0]):
        self.actions = {'up': (-1, 0), 'down': (1, 0), 'left': (0, -1), 'right': (0, 1)}
        self.pos = pos
        self.env = env
        self.money = money
        self.step_cost = step_cost

    # Movements restricted to the room. A movement will spend money acording to the specified cost parameter
    def move(self, action):
        if self.money <= 0:
           print('out of money')
           return
        offset = self.actions[action]
        self.pos[0] = np.clip(self.pos[0] + offset[0], 0, self.env.shape[0]-1)
        self.pos[1] = np.clip(self.pos[1] + offset[1], 0, self.env.shape[1]-1)
        self.money -= self.step_cost
        if self.env.state[self.pos[0], self.pos[1]] > 0:
            self.money += self.env.state[self.pos[0], self.pos[1]]
            self.env.state[self.pos[0], self.pos[1]] = 0

    # Printing information if required
    def print_info(self):
        clear_output(wait=True)
        time.sleep(1)
        print('***************\nCurrent position: ' + str(self.pos))
        print('Money left: ' + str(self.money))
        print('Matrix: \n' + str(self.env.state))

"""##Execution:
Problem solution made by Team 2

1. Initialization parameters are read from a JSON file.
The agent has a initial amount of money, and gets it's initial position from the file.

2. The environment takes its size and prizes position also form the JSON file.

3. The agent starts it's movement on the position defined in the file.

4. Search - ?? Which algorithm??

"""

# Reading information from files
f = open('/content/params3.json')
parameters = json.load(f)
room = Room(np.array(parameters['state']))
agent = Agent(room, parameters['money'], parameters['step_cost'], parameters['position'])

# Example execution with a list of actions
for action in ['right', 'down', 'down', 'left', 'right', 'right', 'right', 'left', 'up', 'right', 'up', 'up', 'up']:
    agent.print_info()
    agent.move(action)
agent.print_info()



""""position": [1, 3]

[-3.0, 1.0, 0.0, 0.0],
[0.0, 0.0, 2.0, 0.0],
[-2.0, 0.0, 0.0, 0.0],
[1.0, 0.0, 0.0, 3.0]
"""